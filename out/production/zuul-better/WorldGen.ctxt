#BlueJ class context
comment0.target=WorldGen
comment0.text=\n\ the\ worldGen\ class\ generates\ the\ world\ of\ the\ game.\n\ it\ initialises\ all\ the\ players,\ NPCs,\ and\ items.\n\n\ @author\ Syraj\ Alkhalil\n\ @version\ 28.11.2021\n
comment1.params=
comment1.target=WorldGen()
comment1.text=\n\ generate\ the\ world.\n\ create\ the\ rooms,\ the\ people,\ and\ the\ items.\n
comment10.params=
comment10.target=void\ givePeopleItems()
comment10.text=\n\ give\ all\ the\ people\ the\ items\ they\ need.\n
comment11.params=
comment11.target=void\ addPeopleToRooms()
comment11.text=\n\ add\ the\ people\ to\ the\ rooms\ in\ which\ they\ belong.\n
comment12.params=
comment12.target=void\ createRooms()
comment12.text=\n\ Create\ all\ the\ rooms\ and\ link\ their\ exits\ together.\n
comment13.params=
comment13.target=void\ setExists()
comment13.text=\n\ set\ all\ the\ exists\ for\ all\ the\ rooms\n
comment14.params=
comment14.target=void\ addExistsForJoe()
comment14.text=\n\ set\ all\ the\ exists\ for\ all\ the\ rooms\ for\ the\ character\ joe\ specifically\n\ this\ needed\ to\ be\ done\ again\ despite\ being\ done\ above\ because\ a\ hashmap\n\ has\ been\ used\ to\ store\ all\ the\ exists.\ since\ hashmaps\ aren't\ indexed\n\ I\ can't\ access\ a\ hashmap\ to\ get\ a\ random\ exist.\ therefore,\ all\ the\n\ exists\ are\ going\ to\ be\ stored\ in\ an\ arraylist\ which\ I\ am\ going\ to\ access\n\ randomly.\n\n\ NOTE\:\ I\ could\ have\ redesigned\ the\ entire\ way\ exists\ are\ stored,\ but\ I\ don't\ have\ time.\n
comment15.params=
comment15.target=void\ creatItems()
comment15.text=\n\ Create\ all\ items\ in\ all\ the\ rooms\n
comment16.params=
comment16.target=void\ addItemsToRooms()
comment16.text=\n\ Add\ all\ the\ items\ to\ all\ the\ rooms\n
comment17.params=
comment17.target=void\ populate()
comment17.text=\n\ add\ the\ rooms\ to\ the\ ArrayList\ rooms.\n
comment18.params=
comment18.target=Room\ pickRandomRoom()
comment18.text=\n\ pick\ a\ room\ at\ random\ from\ the\ rooms\ created...\n
comment19.params=room
comment19.target=Room\ getRoom(java.lang.String)
comment19.text=\n\ check\ if\ a\ room\ is\ inside\ the\ ArrayList\ rooms\n\ can't\ use\ the\ contains\ method\ because\ rooms\ is\ of\ type\ Room\n\ and\ the\ user\ is\ inputting\ a\ string\n\ @return\ the\ room\ given\ a\ string\n
comment2.params=
comment2.target=void\ initialiseNotes()
comment2.text=\n\ add\ the\ notes\ to\ the\ HashMap\n
comment20.params=room
comment20.target=boolean\ isRoom(java.lang.String)
comment20.text=\n\ same\ logic\ as\ getRoom()\ method.\ just\ returns\ a\ boolean\ value\n\ instead\ of\ the\ object\ Room.\n\ @return\ if\ a\ string\ is\ a\ room\n
comment3.params=note
comment3.target=java.lang.String\ getNote(Items)
comment4.params=
comment4.target=Room\ getLab()
comment5.params=
comment5.target=java.util.ArrayList\ attackingPlayer()
comment5.text=\n\ This\ method\ checks\ who\ is\ attacking\ the\ player\ and\ returns\ the\ enemies\ attack\ the\ player.\n\n\ @return\ the\ arrayList\ of\ all\ the\ enemies\ currently\ attacking\ the\ player.\n
comment6.params=
comment6.target=NPCJoe\ getJoe()
comment6.text=\n\ accessor\ method\ that\ returns\ joe.\n\ @return\ the\ NPC\ joe.\ NPC\ joe\ inherits\ from\ People.\n
comment7.params=
comment7.target=NPCLeo\ getLeo()
comment7.text=\n\ accessor\ method\ that\ returns\ Leo.\n\ @return\ the\ NPC\ Leo.\ NPC\ Leo\ inherits\ from\ People.\n
comment8.params=
comment8.target=People\ getPlayer()
comment8.text=\n\ accessor\ method\ that\ returns\ the\ current\ player.\n\ @return\ the\ current\ player.\n
comment9.params=
comment9.target=void\ createPeople()
comment9.text=\n\ create\ a\ list\ of\ all\ people\ in\ the\ game.\n\ and\ add\ them\ to\ the\ rooms\ and\ give\ them\ the\ items\ they\ need.\n
numComments=21
